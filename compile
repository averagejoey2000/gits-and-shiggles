#/bin/sh
echo 'Start compile'
if [ -f *.py ] #Check for python files
then # If python files exist, do
    if [ -f easy_install.py] #check if easy_install.py files exist
    then  # if they do,
	python easy_install.py # use python to execute
	echo "DONE!" #And then tell me about it
    elif [ -f setup.py] # elseif: if no easy install py , look for setup files
    then # if they do
	python setup.py install #execute them with the option "install"
	echo 'DONE!' # Then tell me about it
    else # otherwise (Python files exist but they are neither easyinstall nor setup python files)
	python *.py #execute them
    #fi?
fi # end. Simple if: if python files exist, do if then elif then else. (figure out how to execute them(check for python files))
if [ -f Makefile.?? ] #check for gnu make compatibility
then
    ./configure || ./autogen.sh && ./configure || autoreconf -i $$ ./configure #the documentation states that makefiles are generated by the configure script. If none exists, one is generated from the autogen.sh script, usually containing autoreconf -i somewhere in there. if neither script exists, I simply use autoreconf -i to generate the configure script.
    make && make check ; make installcheck ; make install || sudo make install || su -c ' make install' #make does the heavy lifting. I require that make check executes if and only if make succeeds. make check may fail. make install check may fail. make install executes with no administrative privileges. If it fails, it falls back to sudo, if sudo fails, it falls back to switch user command 'command'
    echo 'done' #and tells me about it.
else #otherwise
	make || cat README || cat INSTALL || cat README.md || cat TODO #makes one last attempt to make, (not sure if this is neccesary) and then attempts to read all documentation using cat.
fi #Finish logic statement for gnu compatible software
fi #finish script
echo 'Compile completed. If errors not shown above, installation was successful.'
